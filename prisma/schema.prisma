// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator zod {
    provider = "zod-prisma-types"
}

model Room {
    id           String              @id @default(cuid())
    roomNumber   String              @unique
    roomName     String?
    roomType     RoomType            @default(STANDARD)
    status       RoomStatus          @default(VACANT)
    capacity     Int
    reservations Reservation[]
    images       RoomImageRelation[]

    dailyRateUSD Decimal @default(20) @db.Decimal(10, 2)
    tasks        Task[]
}

model RoomImage {
    id         String              @id @default(cuid())
    fileUrl    String
    fileKey    String
    roomImages RoomImageRelation[]

    @@index([fileUrl])
}

model RoomImageRelation {
    id          String    @id @default(cuid())
    roomId      String
    room        Room      @relation(fields: [roomId], references: [id])
    roomImage   RoomImage @relation(fields: [roomImageId], references: [id])
    roomImageId String

    @@index([roomId])
    @@index([roomImageId])
}

model Guest {
    id                   String        @id @default(cuid())
    firstName            String
    surname              String
    fullName             String?
    email                String        @unique
    reservations         Reservation[]
    currentReservationId String?
    orders               Order[]
    type                 GuestType     @default(HOTEL)
}

model Reservation {
    id        String            @id @default(cuid())
    guest     Guest?            @relation(fields: [guestId], references: [id])
    guestId   String?
    userId    String?
    room      Room?             @relation(fields: [roomId], references: [id])
    roomId    String?           @unique
    roomType  RoomType?         @default(STANDARD)
    checkIn   DateTime
    checkOut  DateTime
    status    ReservationStatus @default(CONFIRMED)
    createdAt DateTime          @default(now())
    updatedAt DateTime?         @updatedAt
    orders    Order[]

    // Basic guest information fields
    guestName  String
    guestEmail String?

    subTotalUSD   Decimal?      @db.Decimal(10, 2)
    paymentStatus PaymentStatus @default(UNPAID)

    @@index([roomId])
    @@index([guestId])
}

model Task {
    id          String   @id @default(cuid())
    shortDesc   String
    description String
    type        TaskType @default(TASK)
    roomId      String?
    room        Room?    @relation(fields: [roomId], references: [id])
    location    String

    @@index([roomId])
}

// ingredients represents the individual items used by an Item - e.g. for mixed drinks.
// usedByItems represents the Items that uses Item as an ingredient.
model Item {
    id                String           @id @default(cuid())
    name              String
    priceUSD          Decimal          @db.Decimal(10, 2)
    happyHourPriceUSD Decimal?         @db.Decimal(10, 2)
    itemOrders        ItemOrders[]
    category          ItemCategory
    quantityInStock   Int              @default(0)
    quantityUnit      String?
    ingredients       ItemIngredient[] @relation("ItemIngredients")
    usedByItems       ItemIngredient[] @relation("UsedByItems")
}

// Each 
model ItemIngredient {
    id           String   @id @default(cuid())
    name         String?
    parentItems  Item[]   @relation("ItemIngredients")
    ingredientId String?
    ingredient   Item?    @relation("UsedByItems", fields: [ingredientId], references: [id])
    quantity     Decimal?
    quantityUnit String?

    @@index([ingredientId])
}

model Order {
    id            String       @id @default(cuid())
    userId        String?
    guestId       String?
    guest         Guest?       @relation(fields: [guestId], references: [id])
    name          String?
    email         String?
    items         ItemOrders[]
    status        OrderStatus? @default(UNPAID)
    reservationId String?
    reservation   Reservation? @relation(fields: [reservationId], references: [id])
    subTotalUSD   Decimal      @db.Decimal(10, 2)
    happyHour     Boolean      @default(false)
    createdAt     DateTime     @default(now())

    @@index([reservationId])
    @@index([guestId])
}

model ItemOrders {
    id       String @id @default(cuid())
    itemId   String
    item     Item   @relation(fields: [itemId], references: [id])
    orderId  String
    order    Order  @relation(fields: [orderId], references: [id])
    quantity Int    @default(1)

    @@index([orderId])
    @@index([itemId])
}

enum OrderStatus {
    PAID
    UNPAID
}

enum ReservationStatus {
    CONFIRMED
    CHECKED_IN
    FINAL_BILL
    CHECKED_OUT
}

enum ItemCategory {
    SOFT_DRINKS
    BEER
    WINE
    SPIRITS
    PREMIUM_SPIRITS
    COCKTAILS
    SNACKS
    FOOD
    ENTERTAINMENT
    INGREDIENT
}

enum RoomType {
    STANDARD
    SUPERIOR
    DELUXE
}

enum GuestType {
    HOTEL
    OUTSIDE
    STAFF
}

enum RoomStatus {
    OCCUPIED
    VACANT
    MAINTENANCE
}

enum PaymentStatus {
    PAID
    UNPAID
}

enum TaskType {
    ISSUE
    TASK
}
