// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Room {
    id           String        @id @default(cuid())
    roomNumber   String        @unique
    roomName     String?
    roomType     RoomType      @default(STANDARD)
    status       RoomStatus    @default(VACANT)
    variant      RoomVariant   @default(POOL_VIEW)
    capacity     Int
    reservations Reservation[]

    dailyRateUSD Decimal @default(20) @db.Decimal(10, 2)
    tasks        Task[]
}

model ReservationItem {
    id             String      @id @default(cuid())
    description    String
    descForInvoice String?
    roomType       RoomType    @default(STANDARD)
    roomVariant    RoomVariant @default(POOL_VIEW)
    boardType      BoardType   @default(NONE)

    reservations Reservation[]
}

model Guest {
    id                   String        @id @default(cuid())
    firstName            String
    surname              String
    fullName             String?
    email                String        @unique
    reservations         Reservation[]
    currentReservationId String?
    orders               Order[]
    invoices             Invoice[]
    type                 GuestType     @default(HOTEL)
    availableCredits     Decimal       @default(0) @db.Decimal(10, 2)
    address              Json?
}

model Reservation {
    id                String           @id @default(cuid())
    reservationItemId String?
    reservationItem   ReservationItem? @relation(fields: [reservationItemId], references: [id])

    guest   Guest?  @relation(fields: [guestId], references: [id])
    guestId String?
    userId  String?

    room        Room?       @relation(fields: [roomId], references: [id])
    roomId      String?     @unique
    roomType    RoomType?   @default(STANDARD)
    roomVariant RoomVariant @default(NONE)

    checkIn  DateTime
    checkOut DateTime

    status ReservationStatus @default(CONFIRMED)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    orders    Order[]
    roomRate  Decimal?  @db.Decimal(10, 2)

    // Basic guest information fields
    guestName  String
    guestEmail String?

    subTotalUSD   Decimal?      @db.Decimal(10, 2)
    paymentStatus PaymentStatus @default(UNPAID)

    invoiceId String?  @unique
    invoice   Invoice?

    @@index([roomId])
    @@index([guestId])
    @@index([reservationItemId])
}

model Invoice {
    id            String        @id @default(cuid())
    invoiceNumber String        @unique
    lineItems     InvoiceItem[]
    createdAt     DateTime      @default(now())
    totalUSD      Decimal?      @db.Decimal(10, 2)

    reservationId String?      @unique
    reservation   Reservation? @relation(fields: [reservationId], references: [id])

    customerName  String?
    customerEmail String?

    guestId       String?
    guest         Guest?         @relation(fields: [guestId], references: [id])
    status        PaymentStatus  @default(UNPAID)
    paymentMethod PaymentMethod?
    orders        Order[]

    @@index([reservationId])
    @@index([guestId])
}

model InvoiceItem {
    id           String  @id @default(cuid())
    invoiceId    String
    invoice      Invoice @relation(fields: [invoiceId], references: [id])
    description  String
    qty          Int
    unitPriceUSD Decimal @db.Decimal(10, 2)
    subTotalUSD  Decimal @db.Decimal(10, 2)

    @@index([invoiceId])
}

model Task {
    id          String   @id @default(cuid())
    shortDesc   String
    description String
    type        TaskType @default(TASK)
    roomId      String?
    room        Room?    @relation(fields: [roomId], references: [id])
    location    String

    @@index([roomId])
}

// ingredients represents the individual items used by an Item - e.g. for mixed drinks.
// usedByItems represents the Items that uses Item as an ingredient.
model Item {
    id                String       @id @default(cuid())
    active            Boolean      @default(true)
    name              String
    category          ItemCategory
    descForInvoice    String?
    priceUSD          Decimal      @db.Decimal(10, 2)
    happyHourPriceUSD Decimal?     @db.Decimal(10, 2)
    staffPriceUSD     Decimal?     @db.Decimal(10, 2)
    totalCostUSD      Decimal?     @db.Decimal(10, 2)
    costPerMeasureUSD Decimal?     @db.Decimal(10, 2)

    quantityInStock Decimal @default(0) @db.Decimal(10, 2)
    quantityUnit    String? // The unit of measure e.g. ml, g
    stockManaged    Boolean @default(true)
    displayOnPOS    Boolean @default(true)

    itemOrders ItemOrders[]

    // For mixed items
    ingredients ItemIngredient[] @relation("ItemIngredients")
    usedByItems ItemIngredient[] @relation("UsedByItems")
}

model ItemIngredient {
    id           String   @id @default(cuid())
    name         String?
    parentItems  Item[]   @relation("ItemIngredients")
    ingredientId String?
    ingredient   Item?    @relation("UsedByItems", fields: [ingredientId], references: [id])
    quantity     Decimal? @db.Decimal(10, 2)
    quantityUnit String?

    @@index([ingredientId])
}

model Order {
    id              String          @id @default(cuid())
    userId          String?
    guestId         String?
    guest           Guest?          @relation(fields: [guestId], references: [id])
    name            String?
    email           String?
    invoiceId       String?
    invoice         Invoice?        @relation(fields: [invoiceId], references: [id])
    items           ItemOrders[]
    status          OrderStatus?    @default(UNPAID)
    reservationId   String?
    reservation     Reservation?    @relation(fields: [reservationId], references: [id])
    subTotalUSD     Decimal         @db.Decimal(10, 2)
    happyHour       Boolean         @default(false)
    createdAt       DateTime        @default(now())
    appliedDiscount AppliedDiscount @default(NONE)

    @@index([reservationId])
    @@index([guestId])
    @@index([invoiceId])
}

model ItemOrders {
    id            String   @id @default(cuid())
    itemId        String
    item          Item     @relation(fields: [itemId], references: [id])
    orderId       String
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    reservationId String?
    quantity      Int      @default(1)
    subTotalUSD   Decimal? @db.Decimal(10, 2)

    @@index([orderId])
    @@index([itemId])
    @@index([reservationId])
}

enum OrderStatus {
    PAID
    UNPAID
}

enum BoardType {
    BREAKFAST
    NONE
}

enum ReservationStatus {
    CONFIRMED
    CHECKED_IN
    FINAL_BILL
    CHECKED_OUT
}

enum ItemCategory {
    SOFT_DRINKS
    BEER
    WINE
    SPIRITS
    PREMIUM_SPIRITS
    MIXED_DRINKS
    COCKTAILS
    SNACKS
    FOOD
    TICKETS
    INGREDIENT
    SERVICES
}

enum RoomType {
    STANDARD
    SUPERIOR
    DELUXE
}

enum GuestType {
    HOTEL
    OUTSIDE
    STAFF
}

enum RoomStatus {
    OCCUPIED
    VACANT
    MAINTENANCE
}

enum RoomVariant {
    POOL_VIEW
    POOL_SIDE
    NONE
}

enum PaymentStatus {
    PAID
    UNPAID
}

enum TaskType {
    ISSUE
    TASK
}

enum PaymentMethod {
    CASH
    CARD
    TRANSFER
    CREDIT
}

enum AppliedDiscount {
    HAPPY_HOUR
    STAFF
    CREDITS
    NONE
}
