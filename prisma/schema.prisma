// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Room {
    id           String              @id @default(cuid())
    roomNumber   String              @unique
    roomName     String?
    roomTypeId   String
    roomType     RoomType            @relation(fields: [roomTypeId], references: [id])
    capacity     Int
    reservations Reservation[]
    images       RoomImageRelation[] // Updated field to use intermediary model

    @@index([roomTypeId])
}

model RoomImage {
    id         String              @id @default(cuid())
    fileUrl    String
    fileKey    String
    roomImages RoomImageRelation[] // Updated field to use intermediary model

    @@index([fileUrl])
}

model RoomImageRelation {
    id          String    @id @default(cuid())
    roomId      String
    room        Room      @relation(fields: [roomId], references: [id])
    roomImage   RoomImage @relation(fields: [roomImageId], references: [id])
    roomImageId String

    @@index([roomId])
    @@index([roomImageId])
}

model Reservation {
    id        String            @id @default(cuid())
    userId    String
    room      Room              @relation(fields: [roomId], references: [id])
    roomId    String            @unique
    checkIn   DateTime
    checkOut  DateTime
    status    ReservationStatus @default(CONFIRMED)
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
    orders    Order[]

    @@index([roomId])
}

model RoomType {
    id    String @id @default(cuid())
    name  String
    rooms Room[]
}

model Task {
    id          String @id @default(cuid())
    shortDesc   String
    description String
}

model Item {
    id         String       @id @default(cuid())
    name       String
    price      Int
    itemOrders ItemOrders[]
}

model Order {
    id            String       @id @default(cuid())
    userId        String?
    customerName  String
    customerEmail String?
    items         ItemOrders[]
    status        OrderStatus? @default(UNPAID)
    reservationId String?
    reservation   Reservation? @relation(fields: [reservationId], references: [id])
    subTotal      Int?

    @@index([reservationId])
}

model ItemOrders {
    id       String @id @default(cuid())
    itemId   String
    item     Item   @relation(fields: [itemId], references: [id])
    orderId  String
    order    Order  @relation(fields: [orderId], references: [id])
    quantity Int    @default(1)

    @@index([orderId])
    @@index([itemId])
}

enum OrderStatus {
    PAID
    UNPAID
}

enum ReservationStatus {
    CONFIRMED
    CHECKED_IN
    CHECKED_OUT
}
